{"version":3,"sources":["Recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingred","className","style","recipe","ing","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","onChange","target","value","type","key","label","ingredients","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,sB,mNCqBzCC,EAjBA,SAAC,GACf,IADgBC,EACjB,EADiBA,MAAMC,EACvB,EADuBA,SAASC,EAChC,EADgCA,MAAMC,EACtC,EADsCA,OAElC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BACKN,GAEL,wBAAII,UAAWC,IAAME,KAChBJ,EAAOK,KAAI,SAAAD,GAAG,OACX,4BAAKA,EAAIE,UAEjB,2BAAG,wCAAiBR,GACpB,yBAAKS,IAAKR,EAAOS,IAAKX,MCmDnBY,EAhEH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAKJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,sCAaG,cACXM,EADW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBC,QAAQC,IAAIF,GACZX,EAAWW,EAAKG,MALC,2CAAH,qDAuBhB,OACE,yBAAKzB,UAAU,OACb,0BAAMA,UAAU,cAAc0B,SAVhB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAQN,2BAAOb,UAAU,aACf6B,SAlBa,SAAAF,GAEnBd,EAAUc,EAAEG,OAAOC,QAiBbA,MAAOnB,EACPoB,KAAK,SACP,4BAAQhC,UAAU,gBAChBgC,KAAK,UADP,WAIH,yBAAKhC,UAAU,WACdU,EAAQN,KAAI,SAAAF,GAAM,OAChB,kBAAC,EAAD,CAAQ+B,IAAK/B,EAAOA,OAAOgC,MACzBtC,MAAOM,EAAOA,OAAOgC,MACrBrC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,OAAQG,EAAOA,OAAOiC,oBChDZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.658e60ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__n3x7X\",\"ing\":\"Recipe_ing__3giMX\"};","import React from 'react'\nimport  style from \"./Recipe.module.css\"\n\n\n///use className={style.(classname)}\nconst Recipe = ({title,calories,image,ingred}) =>\n{\n    return(\n        <div className={style.recipe}>\n            <h2>\n                {title}\n            </h2>\n            <ol className={style.ing}>\n                {ingred.map(ing=>\n                    <li>{ing.text}</li>)}\n            </ol>\n            <p><b>Calories:</b>{calories}</p>\n            <img src={image} alt={title}></img>\n        </div>\n    )\n}\n\nexport default Recipe\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst App = () => {\n\n  const APP_ID = \"77165a02\";\n  const APP_KEY = \" 5c5b6e7d93a2b00604c0beb1f8f06f4f\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query])\n\n\n  //use effect should only work when search button is clicked\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    console.log(data);\n    setRecipes(data.hits)\n  }\n\n\n  const updateSearch = e => {\n\n    setSearch(e.target.value);\n    //upadted value\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search) ;\n    setSearch('');\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input className=\"search-bar\"\n          onChange={updateSearch}\n          value={search}\n          type=\"text\" />\n        <button className=\"search-button\"\n          type=\"submit\"\n        >Search</button>\n      </form>\n     <div className=\"recipes\">\n     {recipes.map(recipe => (\n        <Recipe key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingred={recipe.recipe.ingredients}\n        />\n      ))}\n     </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}